{"version":3,"sources":["logo.svg","pokemon.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Pokemon","this","props","pokemon","pokemonId","classname","src","Number","alt","name","Component","App","state","pokemonsIds","collection","1","id","count","entree","handleChange","event","array","Array","i","target","value","length","setState","fetch","then","res","json","result","results","Object","keys","pokemons","map","key","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kJAAAA,EAAOC,QAAU,IAA0B,kC,uJCuB5BC,G,6LAjBJ,MAGsBC,KAAKC,MAA3BC,EAHA,EAGAA,QAASC,EAHT,EAGSA,UAGhB,OACE,yBAAKC,UAAU,WACb,yBAAKC,IAAG,mFAA8EC,OAAOH,GAAW,EAAhG,QACNC,UAAU,kBACVG,IAAG,UAAKL,EAAQM,QAClB,uBAAGJ,UAAU,iBAAb,qBAAgDF,EAAQM,W,GAd1CC,cCgFPC,G,iNAxEbC,MAAQ,CACNC,YAAa,CAAC,GACdC,WAAY,CAACC,EAAG,CAACN,KAAM,aAAcO,GAAI,IACzCC,MAAO,EACPC,OAAQ,I,EAyBVC,aAAe,SAAAC,GAEb,IADA,IAAIC,EAAQ,IAAIC,MACPC,EAAI,EAAGA,GAAKH,EAAMI,OAAOC,MAAMC,OAAQH,IAC9CF,EAAME,GAAKA,EAEb,EAAKI,SAAS,CACZV,MAAOG,EAAMI,OAAOC,MAAMC,OAC1BR,OAAQE,EAAMI,OAAOC,MACrBZ,YAAaQ,K,mFA7BI,IAAD,OASlBO,MAAM,gDACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKL,SAAS,CACZb,WAAYkB,EAAOC,QACnBpB,YAAaqB,OAAOC,KAAKH,EAAOC,gB,+BAoBjC,MAG2BhC,KAAKW,MAAhCC,EAHA,EAGAA,YAAaC,EAHb,EAGaA,WAGdsB,EAAWvB,EAAYwB,KAAI,SAAAjC,GAC/B,IAAMD,EAAUW,EAAWV,GAG3B,OACE,wBAAIC,UAAU,iBAAiBiC,IAAKlC,GAClC,kBAAC,EAAD,CAASD,QAASA,EAASC,UAAWA,QAO5C,OACE,yBAAKC,UAAU,QACb,8BAAUkC,YAAY,QAAQC,SAAUvC,KAAKkB,eAC7C,uCAAalB,KAAKW,MAAMM,OAAxB,YAAyCjB,KAAKW,MAAMK,MAApD,YACA,wBAAIZ,UAAU,YAAY+B,Q,GApEhB1B,cCGE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.993572e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react'\n\n// Un element pokemon individuel\nclass Pokemon extends Component {\n\n  // On le crée\n  render() {\n\n    // On stocke le pokemon dans les donnees\n    const {pokemon, pokemonId} = this.props\n\n    // On l'affiche\n    return (\n      <div classname=\"pokemon\">\n        <img src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${Number(pokemonId)+1}.png`}\n          classname=\"pokemon__sprite\"\n          alt={`${pokemon.name}`} />\n        <p classname=\"pokemon__name\">Bonjour tres cher {pokemon.name}</p>\n      </div>\n    )\n  }\n}\n\nexport default Pokemon\n","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Pokemon from './pokemon.js'\n\nimport './main.css'\n\n// Le composant principal commence ici\n\nclass App extends Component {\n  // l'etat contient les ids des pokemons\n  state = {\n    pokemonsIds: [1],\n    collection: {1: {name: \"Bulbizarre\", id: 1}},\n    count: 0,\n    entree: ''\n  }\n\n  // à la montée du composant, on fetch les données de pokemon depuis une api\n  componentDidMount() {\n    /*this.props.getPokemons().then(action => {\n      const {collection} = this.props\n\n      return this.setState({\n        pokemonsIds: Object.keys(collection)\n      })\n    })*/\n\n    fetch(\"https://pokeapi.co/api/v2/pokemon/?limit=964\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            collection: result.results,\n            pokemonsIds: Object.keys(result.results)\n          });\n        }\n      )\n  }\n\n  handleChange = event => {\n    var array = new Array();\n    for (var i = 0; i <= event.target.value.length; i++) {\n      array[i] = i;\n    }\n    this.setState({\n      count: event.target.value.length,\n      entree: event.target.value,\n      pokemonsIds: array\n    });\n  }\n\n\n  // La fonction qui affiche ce qu'il faut\n  render() {\n\n    // les ids et la collection sont stockées\n    const {pokemonsIds, collection} = this.state\n\n    // On crée la liste de pokemons\n    const pokemons = pokemonsIds.map(pokemonId => {\n      const pokemon = collection[pokemonId]\n\n      // On affiche un element pokemon individuel\n      return (\n        <li classname=\"pokemons__item\" key={pokemonId}>\n          <Pokemon pokemon={pokemon} pokemonId={pokemonId} />\n        </li>\n      )\n    })\n\n\n    // On affiche l'element liste pokemons\n    return(\n      <div classname=\"page\">\n        <textarea placeholder=\"write\" onChange={this.handleChange}></textarea>\n        <p> Bonjour {this.state.entree}, il y a {this.state.count} lettres</p>\n        <ul classname=\"pokemons\">{pokemons}</ul>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}